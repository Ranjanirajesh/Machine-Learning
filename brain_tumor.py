# -*- coding: utf-8 -*-
"""brain_tumor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17xBjKF0FO5BkmAS0ekXKglK1pdq94rl2
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from google.colab import drive
drive.mount('/content/drive')

IMG_SIZE=224
BATCH_SIZE=32

train_datagen=ImageDataGenerator(rescale=1.225,validation_split=0.2)

train_generator=train_datagen.flow_from_directory(
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training',
    directory='/content/drive/MyDrive/brain_tumor_dataset'

)

val_generator=train_datagen.flow_from_directory(
    target_size=(IMG_SIZE,IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation',
    directory='/content/drive/MyDrive/brain_tumor_dataset'
)

model=keras.Sequential([
    layers.Conv2D(32,kernel_size=(3,3),activation='relu',input_shape=(IMG_SIZE,IMG_SIZE,3)),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Conv2D(64,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Conv2D(128,kernel_size=(3,3),activation='relu'),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.Flatten(),
    layers.Dense(128,activation='relu'),
    layers.Dense(1,activation='sigmoid')
])

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

model.fit(train_generator,epochs=3,validation_data=val_generator,batch_size=BATCH_SIZE)

model.save('/content/drive/MyDrive/brain_tumor_dataset/BrainTumor.h5')

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
model=load_model('/content/drive/MyDrive/brain_tumor_dataset/BrainTumor.h5')
print("Model Loaded Successfully")

test_image_path='/content/drive/MyDrive/brain_tumor_dataset/yes/Y11.jpg'
img=image.load_img(test_image_path,target_size=(224,224))
plt.imshow(img)
plt.axis('off')
plt.show()

immg_array=image.img_to_array(img)
immg_array=np.expand_dims(immg_array,axis=0)
immg_array=immg_array/255.0

prediction=model.predict(immg_array)
print(prediction)

if prediction>0.5:
  print("Tumor Detected")
else:
  print("No Tumor Detected")